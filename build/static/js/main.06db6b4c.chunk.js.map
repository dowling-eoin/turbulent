{"version":3,"sources":["components/DisplayLines/Line/index.tsx","turbulent.svg","logo.svg","components/DisplayLines/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Index","props","line","updateLines","useEffect","className","DisplayText","Props","countLineUpdates","limit","count","lines","length","state","lineCount","sendString","loading","this","splitString","text","body","string","allowBreaks","wordWrap","remainingString","lineEnd","substr","lastIndexOf","indexOf","push","stringStart","word","setState","payload","join","context","debounce","a","fetch","method","JSON","stringify","headers","then","response","console","log","catch","rejected","prevState","slice","sendWordToAPI","id","src","turbulent","alt","onClick","logo","map","Line","bind","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06db6b4c.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport \"./index.css\";\n\nfunction Index(props: any) {\n  const { line, updateLines } = props;\n\n\n  useEffect(() => {\n      updateLines(line);\n  });\n\n  return <div className=\"Line\">{line}</div>;\n}\n\nexport default Index;\n","export default __webpack_public_path__ + \"static/media/turbulent.411936f8.svg\";","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport { Draggable } from 'react-drag-reorder';\nimport \"./index.css\";\nimport Line from \"./Line\";\nimport text from \"../../text/text.json\";\nimport _, {debounce} from 'lodash';\nimport turbulent from \"../../turbulent.svg\";\nimport logo from \"../../logo.svg\";\n\ninterface IProps {};\ninterface IState {\n    lineCount: number;\n    sendString: Array<string>;\n    line: string;\n    loading: boolean;\n};\n\nclass DisplayText extends React.Component<IProps, IState> {\n    constructor(Props: IProps) {\n        super(Props);\n        this.state = {\n            lineCount: 0,\n            sendString : [],\n            line: \"\",\n            loading: false,\n        };\n    }\n\n  lines () {\n     return  this.splitString(\n          text.body,\n          5,\n         false,\n         false\n      );\n  }\n\n  splitString(string: any, limit: number, allowBreaks: boolean, wordWrap: boolean) {\n    const lines = [];\n    let remainingString = string;\n\n    while (remainingString.length > limit) {\n        //Each line ends at the first space found before the length limit\n      let lineEnd = remainingString.substr(0, limit).lastIndexOf(\" \");\n\n      //If we don't want to cut off any words, line ends at the first space after the limit\n        if(allowBreaks === false) {\n            lineEnd = lineEnd <= 0 ? remainingString.indexOf(\" \") : lineEnd;\n        }\n\n        //If the line contains no space - make the index of the end of the line the same as line limit\n        lineEnd = lineEnd <= 0 ? limit : lineEnd;\n\n        //Add line to lines array\n              lines.push(remainingString.substr(0, lineEnd));\n\n    //Get the position of the start of the remaining string\n      let stringStart = remainingString.indexOf(\" \", lineEnd) + 1;\n\n      //Edge cases - What if:\n        // There are no spaces in the next line\n        //OR\n        //There are no more spaces after the line in the rest of the text\n        //OR\n        //We want the words to wrap on to the next line\n        if ((stringStart > (lineEnd + limit)) || (stringStart < lineEnd) || wordWrap === true) {\n            stringStart = lineEnd;\n        }\n        //Remove line from remaining string\n        remainingString = remainingString.substr(stringStart);\n    }\n//Add the last line\n    lines.push(remainingString);\n    return lines;\n  };\n\n\n    sendWordToAPI(word: Array<string>) {\n        this.setState({loading: true});\n        const url = \"https://jsonplaceholder.typicode.com/posts/\";\n\n       let payload = word.join(' ');\n       let context = this;\n        return (debounce(function() {\n           (async () => {\n            const rawResponse = await fetch(url,\n                {\n                    method: \"POST\",\n                    body: JSON.stringify({body: payload}),\n                    headers:\n                        {\n                            \"Content-Type\": \"application/json; charset=utf-8\"\n                        }\n                }).then((response) =>\n            {\n                console.log(response);\n                context.setState({loading: false});\n            }).catch(rejected => {\n                console.log(rejected);\n                context.setState({loading: false});\n            });\n        })();\n       }, 2000))(context);\n    }\n\n\n  updateLines(line:string) {\n\n        //Count how many times the lines update - on final update we will make our API call\n           const count = this.countLineUpdates();\n\n              this.setState(prevState => ({\n                  sendString: [...prevState.sendString, line]\n              }), () => {\n                  //If all of the lines have finished updating we will send the new word order\n                 if (count === this.state.lineCount) {\n                     //Remove previous word and add new word order to state\n                      this.setState({sendString: [...this.state.sendString.slice(this.state.lineCount, this.state.lineCount * 2)]}, () => {\n                          //Send new word order to API\n                          this.sendWordToAPI(this.state.sendString);\n                      })\n                  }\n              });\n  };\n\n    //This is a simple closure function to count how many times updateLine fires\ncountLineUpdates = (function(limit: number) {\n        let count = 0;\n       return function() {\n             count ++;\n            if(count === limit){\n                count = 0;\n                return limit;\n            }\n            return count;\n        };\n    })(this.lines().length);\n\n    componentDidMount(): void {\n        this.setState({ lineCount: this.lines().length });\n        this.setState({ sendString: this.lines() });\n    };\n\n  render() {\n    return (\n      <div id=\"display-lines\">\n          {this.state.loading ? <img src={turbulent} className=\"Loading-Icon\" alt=\"loading icon\" /> :  <img onClick={()=> this.sendWordToAPI(this.state.sendString)} src={logo} className=\"App-logo\" alt=\"logo\" />}\n\n          <Draggable>\n        {this.lines().map(line => (\n          <Line key={line} className={Line} line={line} updateLines={this.updateLines.bind(this)}/>\n        ))}\n          </Draggable>\n       \n      </div>\n    );\n  }\n}\n\nexport default DisplayText;\n","import React from \"react\";\nimport \"./App.css\";\nimport DisplayLines from \"./components/DisplayLines\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n            <DisplayLines />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}